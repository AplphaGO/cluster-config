apiVersion: argoproj.io/v1alpha1
kind: ArgoCD
metadata:
  name: argocd
spec:
  controller:
    env:
    - name: "ARGOCD_K8S_CLIENT_BURST"
      value: "350"
    - name: "ARGOCD_K8S_CLIENT_QPS"
      value: "350"
  dex:
    openShiftOAuth: true
  applicationInstanceLabelKey: argocd.argoproj.io/instance
  applicationSet: {}
  kustomizeBuildOptions: "--enable-helm"
  server:
    insecure: false
    route:
      enabled: true
      tls:
        termination: reencrypt
        insecureEdgeTerminationPolicy: Redirect
  resourceCustomizations: |
    route.openshift.io/Route:
      ignoreDifferences: |
        jsonPointers:
        - /status/ingress
    image.openshift.io/ImageStream:
      health.lua: |
        hs = {}
        hs.status = "Progressing"
        hs.message = ""
        if obj.status ~= nil then
          if obj.status.tags ~= nil then
            numTags = 0
            for _ , item in pairs(obj.status.tags) do
              numTags = numTags + 1
              numItems = 0
              if item.tags ~= nil then
                for _ , item in pairs(item.tags) do
                  numItems = numItems + 1
                end
                if numItems == 0 then
                  return hs
                end
              end
            end
            if numTags > 0 then
              hs.status = "Healthy"
              hs.message = "ImageStream has tags resolved"
              return hs
            end
          end
        end
        return hs
    build.openshift.io/Build:
      health.lua: |
        hs = {}
        if obj.status ~= nil then
          if obj.status.phase ~= nil then
            if obj.status.phase == "Complete" then
              hs.status = "Healthy"
              hs.message = obj.status.phase
              return hs
            end
          end
        end
        hs.status = "Progressing"
        hs.message = "Waiting for Build to complete"
        return hs
  resourceExclusions: |
    - apiGroups:
      - tekton.dev
      clusters:
      - '*'
      kinds:
      - TaskRun
      - PipelineRun
  ha:
    enabled: false
  # rbac:
  #   defaultPolicy: role:readonly
  #   policy: |
  #     g, system:cluster-admins, role:admin
  #     g, argocdadmins, role:admin
  #     g, argocdusers, role:readonly
  #   scopes: "[groups]"