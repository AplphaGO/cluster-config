apiVersion: argoproj.io/v1alpha1
kind: ArgoCD
metadata:
  name: argocd
spec:
  disableAdmin: false
  configManagementPlugins: |-
    - name: kustomize-envvar
      generate:
        command: ["sh", "-c"]
        args: ["kustomize build --enable-helm . | perl -pe 's{\\$(\\{)?(\\w+)(?(1)\\})}{$ENV{$2} // $&}ge'"]
  sso:
    dex:
      image: quay.io/gnunn/dex
      version: token-exchange-1.8
      openShiftOAuth: true
    provider: dex
  resourceTrackingMethod: annotation
  applicationSet: {}
  kustomizeBuildOptions: "--enable-helm"
  notifications:
    enabled: true
  repo:
    env:
      - name: SUB_DOMAIN
        value: '${SUB_DOMAIN}'
  server:
    insecure: true
    route:
      enabled: true
      tls:
        termination: edge
        insecureEdgeTerminationPolicy: Redirect
  resourceCustomizations: |
    route.openshift.io/Route:
      ignoreDifferences: |
        jsonPointers:
        - /status/ingress
    image.openshift.io/ImageStream:
      health.lua: |
        hs = {}
        hs.status = "Progressing"
        hs.message = ""
        if obj.status ~= nil then
          if obj.status.tags ~= nil then
            numTags = 0
            for _ , item in pairs(obj.status.tags) do
              numTags = numTags + 1
              numItems = 0
              if item.tags ~= nil then
                for _ , item in pairs(item.tags) do
                  numItems = numItems + 1
                end
                if numItems == 0 then
                  return hs
                end
              end
            end
            if numTags > 0 then
              hs.status = "Healthy"
              hs.message = "ImageStream has tags resolved"
              return hs
            end
          end
        end
        return hs
    build.openshift.io/Build:
      health.lua: |
        hs = {}
        if obj.status ~= nil then
          if obj.status.phase ~= nil then
            if obj.status.phase == "Complete" then
              hs.status = "Healthy"
              hs.message = obj.status.phase
              return hs
            end
          end
        end
        hs.status = "Progressing"
        hs.message = "Waiting for Build to complete"
        return hs
    PersistentVolumeClaim:
      health.lua: |
        hs = {}
        if obj.status ~= nil then
          if obj.status.phase ~= nil then
            if obj.status.phase == "Pending" then
              hs.status = "Healthy"
              hs.message = obj.status.phase
              return hs
            end
            if obj.status.phase == "Bound" then
              hs.status = "Healthy"
              hs.message = obj.status.phase
              return hs
            end
          end
        end
        hs.status = "Progressing"
        hs.message = "Waiting for certificate"
        return hs
  resourceExclusions: |
    - apiGroups:
      - tekton.dev
      clusters:
      - '*'
      kinds:
      - TaskRun
      - PipelineRun
    - apiGroups:
      - operators.coreos.com
      - operator.openshift.io
      - user.openshift.io
      - config.openshift.io
      - console.openshift.io
      - storage.k8s.io
      - machine.openshift.io
      - machineconfiguration.openshift.io
      - compliance.openshift.io
      clusters:
      - '*'
      kinds:
      - '*'
    - apiGroups:
      - ""
      clusters:
      - '*'
      kinds:
      - namespaces
      - persistentvolumes
    - apiGroups:
      - rbac.authorization.k8s.io
      clusters:
      - '*'
      kinds:
      - ClusterRole
      - ClusterRoleBinding
  ha:
    enabled: false
  # rbac:
  #   defaultPolicy: role:readonly
  #   policy: |
  #     g, system:cluster-admins, role:admin
  #     g, argocdadmins, role:admin
  #     g, argocdusers, role:readonly
  #   scopes: "[groups]"